#!/usr/bin/python

#*****************************************************************************
#* convert_from_16p2: A simple utility that converts from the raw format
#*                    preferred by these reference programmes
#*****************************************************************************
#* Copyright (C) 2017 BBC
#*
#* Authors: James P. Weaver <james.barrett@bbc.co.uk>
#*
#* This program is free software; you can redistribute it and/or modify
#* it under the terms of the GNU General Public License as published by
#* the Free Software Foundation; either version 2 of the License, or
#* (at your option) any later version.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU General Public License for more details.
#*
#* You should have received a copy of the GNU General Public License
#* along with this program; if not, write to the Free Software
#* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111, USA.
#*
#* This program is also available under a commercial proprietary license.
#* For more information, contact us at ipstudio@bbc.co.uk.
#*****************************************************************************

if __name__ == "__main__":
    import argparse
    import struct
    import sys

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description="""\
16p2 to yuv converter
---------------------

Input file should be in 16p2 format (as output by DecodeStream).
ie. 16-bit yuv planar data samples with the active bits in the high order bits

Output file will be in one of several formats depending on settings, the following
table shows the ffmpeg pixel_format name for each of these formats:

 +-------------+--------------------+--------------------+
 | Active Bits | Colour Subsampling | ffmpeg format name |
 +-------------+--------------------+--------------------+
 |      8      |        4:2:0       |      yuv420p       |
 |      8      |        4:2:2       |      yuv422p       |
 |      8      |        4:4:4       |      yuv444p       |
 |     10      |        4:2:0       |    yuv420p10le     |
 |     10      |        4:2:2       |    yuv422p10le     |
 |     10      |        4:4:4       |    yuv444p10le     |
 |     12      |        4:2:0       |    yuv420p12le     |
 |     12      |        4:2:2       |    yuv422p12le     |
 |     12      |        4:4:4       |    yuv444p12le     |
 |     16      |        4:2:0       |    yuv420p16le     |
 |     16      |        4:2:2       |    yuv422p16le     |
 |     16      |        4:4:4       |    yuv444p16le     |
 +-------------+--------------------+--------------------+

""")
    parser.add_argument('infilename', metavar='file', type=str,
                        help='input 16p2 file')
    parser.add_argument('--bits', metavar='bits', type=int, default=10,
                        help='active bits (default 10)')

    args = parser.parse_args()

    f = open(args.infilename, "rb")

    outfilename = args.infilename + ".yuv"

    data = bytearray(f.read())
    data = [ ((data[2*n+0] << 8) + (data[2*n+1]) ) >> (16 - args.bits) for n in range(0,len(data)//2) ]

    of = open(outfilename, "wb")
    if args.bits == 8:
        of.write(struct.pack( "<" + ("B" * len(data)), *data))
    else:
        of.write(struct.pack( "<" + ("H" * len(data)), *data))

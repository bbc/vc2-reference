#!/usr/bin/python

#*****************************************************************************
#* convert_to_16p2: A simple utility that converts to the raw format
#*                  preferred by these reference programmes
#*****************************************************************************
#* Copyright (C) 2020 BBC
#*
#* Authors: James P. Weaver <james.barrett@bbc.co.uk> and Galen Reich
#*
#* This program is free software; you can redistribute it and/or modify
#* it under the terms of the GNU General Public License as published by
#* the Free Software Foundation; either version 2 of the License, or
#* (at your option) any later version.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU General Public License for more details.
#*
#* You should have received a copy of the GNU General Public License
#* along with this program; if not, write to the Free Software
#* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111, USA.
#*
#* This program is also available under a commercial proprietary license.
#* For more information, contact us at ipstudio@bbc.co.uk.
#*****************************************************************************

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description="""\
yuv to 16p2 converter
---------------------

Input file should be in one of several formats depending on settings, the following
table shows the ffmpeg pixel_format name for each of these formats:

 +-------------+--------------------+--------------------+
 | Active Bits | Colour Subsampling | ffmpeg format name |
 +-------------+--------------------+--------------------+
 |      8      |        4:2:0       |      yuv420p       |
 |      8      |        4:2:2       |      yuv422p       |
 |      8      |        4:4:4       |      yuv444p       |
 |     10      |        4:2:0       |    yuv420p10le     |
 |     10      |        4:2:2       |    yuv422p10le     |
 |     10      |        4:4:4       |    yuv444p10le     |
 |     12      |        4:2:0       |    yuv420p12le     |
 |     12      |        4:2:2       |    yuv422p12le     |
 |     12      |        4:4:4       |    yuv444p12le     |
 |     16      |        4:2:0       |    yuv420p16le     |
 |     16      |        4:2:2       |    yuv422p16le     |
 |     16      |        4:4:4       |    yuv444p16le     |
 +-------------+--------------------+--------------------+

Output file will be in 16p2 format (suitable to use as input to by EncodeHQ-CBR, etc ...).
ie. 16-bit yuv planar data samples with the active bits in the high order bits

""")
    parser.add_argument('infilename', metavar='file', type=str,
                        help='input yuv file')
    parser.add_argument('--bits', metavar='bits', type=int, default=10,
                        help='active bits (default 10)')

    args = parser.parse_args()

    outfilename = args.infilename + ".16p2"
    of = open(outfilename, "wb")

    word = bytearray(2)
    temp = bytearray(1)
    with open(args.infilename, "rb") as fi:
        with open(args.infilename+'.16p2', "wb") as fo:
            while True:
                if fi.readinto(word) == 0:
                    break
                if args.bits == 8:
                    temp = word[1]
                    word[1] = 0xFF

                    fo.write(word)

                    word[0] = temp
                    fo.write(word)
                else:
                    n = ((word[1] << 8) + word[0]) << (16 - args.bits)

                    word[0] = n >> 8
                    word[1] = n & 0xFF
                    fo.write(word)
